#+TITLE: Aprotector例会以及任务
#+AUTHOR: 四维创智
#+DATE:13/6/2013

* 进度
** 6.18 - 6.23
	 1.调查dalvik虚拟机的用法，以及命令参数(李晋飞)

	 2.libdex,dumpdex在windows以及ubuntu系统上的移植(阎文斌)

	 3.找到所有dalvik源代码所需的头文件以及源文件并且综合到一起(阎文斌)

	 4.将dalvik的源代码粗略的过一遍，并形成源文件解释文档(阎文斌，王一飞，彭州，王艳东)

	 5.做一个简单的loader程序,此loader是正常的dex文件,加载一个名为chaosvm.so的动态库并打包成apk。打印是否成功。(李晋飞)

	 6.X1的设计（王一飞) <- 23号对此插件进行了探讨

** 6.24 - 6.30
	 1.对X1重新设计的讨论(王一飞)

	 2.每个人对于623代码分析任务的完成时间进行评估(全体项目组)

** 6.30 - 7.14
   1.除阎文斌与彭州外其余人完成对所分析的代码模块

   2.针对hprof进行深入的调查研究(王艳东)

** 7.15 - 7.21
   1.上次没有分析完毕的文件处理完毕(全体项目组)

   2.完成721任务(全体项目组)

   3.确定方案可实施性 (彭州)

** 7.22 - 7.24
   1.调查android程序入口点技术（李晋飞）

   2.so文件在android程序的生命周期（李晋飞）

   3.入口函数最小大小（李晋飞）

   4.是否可以通过so文件修改DEX文件的映射内存（王一飞）

   5.对函数名称HASH库接口进行实现（王艳东）

   6.对chaosvm.so的整体流程进行设计(彭州）

** 7.24 - 7.28
   1.编写简易版本的chaosvm.so（彭州，王一飞）

   2.编写简易版本的SDK（李晋飞，王一飞）

   3.编写简易版本的chaosvmp.exe(王艳东)

   4.调查android上的感染方式(王艳东，彭州)

* 任务
** 623任务
	 alloc目录 - 内存管理 356K (王艳东)

	 analysis - dex文件解析 504K (王一飞 李靖飞)

	 arch - 针对平台进行兼容的代码 80K (阎文斌)

	 compiler - 编译技术实现 3.9M (阎文斌 王艳东)

	 hprof - 内存分析模块 60K (王艳东)

	 interp - c语言版本的字节码解释器 224K (彭州)

	 minterp - 通过c语言版本的解释器生成对应平台的汇编解释器 12M (彭州)

	 jdwp - jdwp调试协议 232K 王一飞 (李靖飞)

	 native - JNI方面的原生JAVA接口 304K (王一飞 李靖飞)

	 oo - 面对对象的处理 340K 王一飞 (李靖飞)

	 os - 针对系统的线程方面的封装 20K (王艳东)

	 reflect - java反射实现 164K (王一飞 李靖飞)

** 630任务
   analysis - dex文件解析 504K (王一飞）

   oo - 面对对象的处理 340K (李靖飞)

   reflect - java反射实现 164K (李靖飞)

   native - JNIT方面的原声JAVA接口 304K (王一飞 李靖飞)

   对hprof的实际使用，以及当前android提供的应用做了解(王艳东)

** 721任务
   王艳东

   Bits.h BitVector.h/cpp Ddm.h/Ddm.cpp Debugger.h/cpp Exception.h/cpp Hash.h/cpp IndirectRefTable.h/cpp Intern.h/cpp 
   
   linerAlloc.h/cpp PointerSet.h/cpp AllocTracker.h/cpp

   彭州

   AtomicCache.h/cpp Atomic.h/cpp Common.h Dalvik.h DalvikVersion.h Globals.h Init.h/cpp InitRefs.cpp
   
   Misc.h/cpp SignalCatcher.h/cpp StdioConverter.h/cpp Thread.h/cpp Sync.h/cpp UtfString.h/cpp

   李晋飞 王一飞

   CheckJni.cpp DvmDex.h/cpp JarFile.h/cpp Jni.cpp JniInternal.h Native.h/cpp RawDexFile.h/cpp
   
   ReferenceTable.h/cpp

   dalvik/Main.cpp （彭州）

   dalvik整体流程分析 （彭州)

   闫文斌
   
   Profile.h/cpp

* 例会
	 6.23(13:30 - 16.15) 623代码分析任务的第一次分工,以及文档的规格。下周确定623任务完成时间。

	 6.30(13:40 - 17:00) 首先对飞哥进行了批评，提交文档格式不正确。飞哥对X1的设计延后。

	 针对623任务的时间进行了规划，确定了代码分析的时间，重新划分了王一飞与李靖飞的工作。

     | 姓名   | 时间进度 |
     | 王一飞 | 2周      |
     | 李靖飞 | 2周      |
     | 彭州   | 1月      |
     | 王艳东 | 2周      |
     | 阎文斌 | 1月      |
	 
	 7.14(14:30 - 16:30) 飞哥缺席。彭提出了对现有项目实施方案的异议。分配了在vm目录下的源代码分析任务，确定实施方案

	 并且确定了对于代码分析的完成最后期限。（仅这周）

	 7.21(13:30 - 18:10) 本项目本来最初有一套方案（Y1 <- 将PC上的虚拟机保护方案移植到此），由阎文斌提出，

	 后来阎发现更加安全的方案（Y2 <- 自己编译一套dalvik的虚拟机），经过1个月的dalvik代码分析，发现完全自己编译一套

	 dalvik虚拟机，目前实现难度太大，这次会议否决了Y2方案，转而对Y1方案进行了详细的探讨。探讨出了对Y1的修改方案X1,

	 修订完成后，发现彭州解释器这部分实现难度还是太大，具体难点有(1.入口点空间问题，2.感染后调用chaosvm.so调用函数

	 JNI注册问题，3.当前线程在dalvik中的“Thread”结构指针的获取）所以由提出了对X1的简化方案X2,这个方案单一让用户使用
	 
	 我们提供的SDK来完成保护，在保护方面只是通过内存的复制来解决。4份方案可见目录下的X1,X2,Y1,Y2

	 7.24(13:30 - 15:30) 这次会议在中心的办公室召开。解决了一些基本疑问，会议后，彭州提出了目前简化方案X2过于简单，提出
	
	 了三种级别的解决。（1.采用PC上壳的思路来解决，2.X2，3.X1)。三种实施阶段。

	 
	 	 
