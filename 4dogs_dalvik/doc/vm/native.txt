[整体介绍]
实现了Android系统API的JNI方法

[JNI注册过程]

1.概述
根据Dalvik虚拟机的运行过程,从中可以知道，Dalvik虚拟机在调用一个成员函数的时候，如果发现该成员函数是一个JNI方法，那么就会直接跳到它的地址去执行。也就是说，JNI方法是直接在本地操作系统上执行的，而不是由Dalvik虚拟机解释器执行。由此也可看出，JNI方法是Android应用程序与本地操作系统直接进行通信的一个手段，在Android系统中，JNI方法是以C/C++语言来实现的，然后编译在一个SO文件里面。这个JNI方法在能够被调用之前，首先要加载到当前应用程序进程的地址空间来

2.注册流程
2.1 System.loadLibrary(String libraryName) [java/lang/System.java]   
System类的成员函数loadLibrary首先调用SecurityManager类的成员函数checkLink来进行安全检查，即检查名称为libName的so文件是否允许加载。注意，这是Java的安全代码检查机制，而不是Android系统的安全检查机制，而且Android系统没有使用它来进行安全检查。因此，这个检查总是能通过的，接下来调用2.2

2.2 Runtime.loadLibrary(String libraryName, ClassLoader loader) [java/lang/Runtime.java]

2.3 Runtime.nativeLoad(String filename, ClassLoader loader) [java/lang/Runtime.java] 
它是一个JNI方法，由于该JNI方法是属于Java核心类Runtime的，也就是说，它在Dalvik虚拟机启动的时候就已经在内部注册过了，因此，这时候我们可以直接调用它注册其它的JNI方法。它的实现是在dalvik/vm/native/java_lang_Runtime.cpp中完成的
	2.3.1 dvmCreateCstrFromString() 将它转换成一个C++层的字符串fileName,接下来调用2.4执行加载so文件的操作

2.4 dvmLoadNativeCode（）[dalvik/vm/Native.cpp]  
	2.4.1 findSharedLibEntry() 检查参数pathName所指定的so文件是否已经加载过了

2.5 JNI_OnLoad(JavaVM* vm, void* reserved);  每一个用来实现JNI方法的so文件都应该定义有一个名称为“JNI_OnLoad”的函数

2.6 jniRegisterNativeMethods(jniRegisterNativeMethods(JNIEnv* env, const char* className,  const JNINativeMethod* gMethods, int numMethods) [JNIHelp.c]
参数env所指向的一个JNIEnv结构体，通过调用这个JNIEnv结构体可以获得参数className所描述的一个类。这个类就是要注册JNI的类，而它所要注册的JNI就是由参数gMethods来描述的
	2.6.1 RegisterNatives()[struct _JNIEnv ]

2.7 RegisterNatives(JNIEnv* env, jclass jclazz, const JNINativeMethod* methods, jint nMethods) 
参数jclazz描述的是要注册JNI方法的类，而参数methods描述的是要注册的一组JNI方法，这个组JNI方法的个数由参数nMethods来描述
	2.7.1 dvmDecodeIndirectRef() 获得要注册JNI方法的类对象,接下来调用2.8

2.8 dvmRegisterJNIMethod(ClassObject* clazz, const char* methodName,  const char* signature, void* fnPtr) [dalvik/vm/Jni.cpp]
通过一个for循环来依次调用函数dvmRegisterJNIMethod注册参数methods描述所描述的每一个JNI方法。注意，每一个JNI方法都由名称、签名和地址来描述。
	2.8.1 dvmFindDirectMethodByDescriptor() 来检查methodName是否是clazz的一个非虚成员函数
	2.8.2 dvmFindVirtualMethodByDescriptor() 来检查methodName是否是clazz的一个虚成员函数

2.9 dvmUseJNIBridge() [dalvik/vm/Jni.cpp] 
执行注册JNI的操作,一个JNI方法并不是直接被调用的，而是通过由Dalvik虚拟机间接地调用,这个用来间接调用JNI方法的函数就称为一个Bridge

2.10 dvmSelectJNIBridge(const Method* method) [dalvik/vm/Jni.cpp] 选择一个合适的Bridge函数

2.11 dvmSetNativeFunc() [dalvik/vm/oo/Class.cpp] 执行真正的JNI方法注册操作

[dalvik\vm\native\InternalNative.cpp]
本地函数的类库的初始化和一些常用的功能函数

[dalvik\vm\native\dalvik_system_DexFile.cpp]
处理dex文件，去打开dex文件，或打开字节数组所代表的dex文件等

[dalvik\vm\native\dalvik_system_Zygote.cpp]
创建一个Dalvik虚拟机进程等

[dalvik\vm\java_lang_Runtime.cpp]
加载so文件代码调用，关于GC堆的操作(eg.返回GC堆总的内存字节数,...)

[dalvik\vm\native\java_lang_VMThread.cpp]
创建一个线程,判断线程的一些状态，设置线程的优先级，判断线程对象是否上锁

[dalvik\vm\native\java_lang_VMClassLoader.cpp]
加载类的相关操作，例如通过类加载器查找并加载一个类
















