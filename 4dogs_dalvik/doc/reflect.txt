<整体介绍>

反射，注解，代理

[专业术语]

反射: 提供类和接口，以获取关于类和对象的反射信息。在安全限制内，反射允许编程访问关于加载类的字段、方法和构造方法的信息，并允许使用反射字段、方法和构造方法对对象上的基本对等项进行操作

代理：动态代理其实就是java.lang.reflect.Proxy类动态的根据您指定的所有接口生成一个class byte，该class会继承Proxy类，并实现所有你指定的接口（您在参数中传入的接口数组）；然后再利用您指定的classloader将 class byte加载进系统，最后生成这样一个类的对象，并初始化该对象的一些值，如invocationHandler,以即所有的接口对应的Method成员。 初始化之后将对象返回给调用的客户端。这样客户端拿到的就是一个实现你所有的接口的Proxy对象

装箱: 就是可以自动将一个数值转换一个对象，例如，将数字1自动转换为一个java.lang.Integer对象。

拆箱: 相应地，也要求能将一个装箱类对象转换成一个数字，例如，将一个值等于1的java.lang.Integer对象转换为数字1

注解: 可以用于创建文档，跟踪代码中的依赖性，甚至执行基本编译时检查。注解是以‘@注解名’在代码中存在的,根据注解参数的个数，我们可以将注解分为：标记注解、单值注解、完整注解三类


<dalvik\vm\Reflect\Annotation.cpp>

处理类中的注解，根据注解获取类的信息或者通过类的信息获取它的注解

[dalvik\vm\Reflect\Proxy.cpp]

java.lang.reflect.Proxy的实现;传统上来说，这是基本解释性代码的完全实现,通过生成字节码来定义一个代理类.


[dalvik\vm\Reflect\Reflect.cpp]

提供类和接口，以获取关于类和对象的反射信息,反射允许加载类的字段、方法和构造方法的信息，并允许使用反射字段、方法和构造方法对对象进行操作


[成员属性的类型、类型代码、类型签名区分]

类型——Java的成员属性的类型一般对应的Java数据类型为Class<?>，它也可以使用格式“String.class”表示，如果是引用可以使用Class<String>进行定义，这是直接基于JVM级别的类型，一般这种数据会提供给JVM用来执行“反射”等操作；　

类型代码——类型代码的数据也是用于JVM判断成员属性数据类型的一种方式，但类型代码的Java数据类型是char，比如‘L’，它一般通过一个字符来判断当前的Java数据类型，序列化时它会把这个字符转换成二进制数据；
　　
类型签名——类型签名本身的Java数据类型是一个String类型，比如：‘Ljava/lang/String;’，它和类型代码一样可以用于JVM判断成员属性的数据类型，但是不仅仅如此，JVM在处理类型签名的时候，针对成员属性、成员函数、类本身都可以使用统一的方式来区分，在JVM里面类型签名相当于类型的唯一标识，它的使用范围比类型代码更加广阔；

