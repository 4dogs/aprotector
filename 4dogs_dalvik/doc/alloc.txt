[整体介绍]
1.android垃圾回收算法:标记并清除(Mark and Sweep GC),拷贝GC(Copying GC)算法.
具体使用什么算法是在编译期决定的，无法在运行的时候动态更换.
2.android内存管理分析
执行流程:dvmStartup[/dalvik/vm/init.cpp] ====>> dvmGcStartup[/dalvik/vm/alloc/Alloc.cpp] ====>> dvmHeapStartup[/dalvik/vm/alloc/Heap.cpp] ====>> dvmHeapSourceStartup[/dalvik/vm/alloc/HeapSource.cpp]
垃圾回收流程:dvmCollectGarbageInternal[/dalvik/vm/alloc/Heap.cpp] ====>> dvmSuspendAllThreads[/dalvik/vm/Thread.cpp] ====>> dvmHeapMarkRootSet[/dalvik/vm/alloc/MarkSweep.cpp] ====>> dvmVisitRoot[/dalvik/vm/alloc/Visit.cpp]

[标记清除回收法]
在这个算法中，程序在运行的过程中不停的创建新的对象并消耗内存，直到内存用光，这时再要创建新对象时，系统暂停其它组件的运行，触发GC线程启动垃圾回收过程。内存回收的原理很简单，就是从所谓的"GC Roots"集合开始，将内存整个遍历一次，保留所有可以被GC Roots直接或间接引用到的对象，而剩下的对象都当作垃圾对待并回收。

[拷贝GC算法]
节点拷贝算法是把整个堆分成两个半区（From，To）， GC的过程其实就是把存活对象从一个半区From拷贝到另外一个半区To的过程，而在下一次回收时，两个半区再互换角色。在移动结束后，再更新对象的指针引用.

[card table]
"Card Table"是一个位数组，每一个位都表示"老一代对象池"内存中一块4KB的区域 – 之所以取4KB，是因为大部分计算机系统中，内存页大小就是4KB。当用户代码执行一个引用赋值（reference assignment）时，虚拟机（通常是JIT组件）不会直接修改内存，而是先将被赋值的内存地址与"老一代对象池"的地址空间做一次比较，如果要修改的内存地址是"老一代对象池"中的地址，虚拟机会修改"Card Table"对应的位为 1，表示其对应的内存页已经修改过 - 不干净（dirty）了.

[备注]
如果在编译dalvik虚拟机的命令中指明了"WITH_COPYING_GC"选项，则编译"/dalvik/vm/alloc/Copying.cpp"源码 – 此是Android中拷贝GC算法的实现，否则编译"/dalvik/vm/alloc/HeapSource.cpp" – 其实现了标注与清理GC算法.

在JVM虚拟机启动时，dvmStartup函数会在准备好Java程序运行所需的所有环境之后，调用dvmGcStartupClasses函数启动几个与GC相关的后台Java线程 ，这些线程在java.lang.Daemons中定义，其中一个线程就是执行java对象finalize函数的HeapWorker线程，之所以要将收集到的java finalize对象引用从虚拟机（native）一端传递到Java端，是因为finalize函数是由java语言编写的，函数里可能会用到很多java对象。这也是为什么如果对象实现了finalize函数，不仅会使其生命周期至少延长一个GC过程，而且也会延长其所引用到的对象的生命周期，从而给内存造成了不必要的压力.


[/4dogs_dalvik/src/vm/alloc/Alloc.cpp]
垃圾回收内存的分配器.

[/4dogs_dalvik/src/vm/alloc/CardTable.cpp]
在逐代GC中，有一个较棘手的问题需要处理 – 即如何处理老一代对象引用新一代对象的问题，"Card Table"的数据结构就是专门设计用来处理这种情况的，"Card Table"是一个位数组，每一个位都表示"老一代对象池"内存中一块4KB的区域 – 之所以取4KB，是因为大部分计算机系统中，内存页大小就是4KB。当用户代码执行一个引用赋值（reference assignment）时，虚拟机（通常是JIT组件）不会直接修改内存，而是先将被赋值的内存地址与"老一代对象池"的地址空间做一次比较，如果要修改的内存地址是"老一代对象池"中的地址，虚拟机会修改"Card Table"对应的位为 1，表示其对应的内存页已经修改过 - 不干净（dirty）了.

</4dogs_dalvik/src/vm/alloc/Copying.cpp>
copy gc算法的实现.
