这个部分可以先参考下老罗博客：http://blog.csdn.net/luoshengyang/article/details/8885792
我们主要关注JNI相关部分；总体来说，JNI是一个提供个C，C++和JAVA交互的环境桥梁。
[JNIEnv]
[1]dalvik/libnativehelper/include/nativehelper/jni.h->struct _JNIEnv->void CallStaticVoidMethod(jclass clazz, jmethodID methodID, ...) /* 通过JNINativeInterface回调函数表
中的CallStaticVoidMethodV()执行J来执行参数clazz和methodID所描述的Java代码 */
[2]dalvik/vm/Jni.c->static const struct JNINativeInterface gNativeInterface = {  
    ...  
    CallStaticVoidMethodV, /* 方法指向dalvik/vm/Stack.cpp->dvmCallMethodV()去执行Java代码 */
    ...  
};  
[3]dalvik/vm/Stack.cpp->dvmCallMethodV() /* 判断是否为natvie方法；如果是JAVA方法，调用dvmInterpret()执行 */
成员函数如果是一个JNI方法，直接跳到它的地址去执行。也就是说，JNI方法是直接在本地操作系统上执行的，而不是由Dalvik虚拟机解释器执行。
[4]加载动态链接库
->System.loadLibrary("xxxx") /* 首先加载so动态链接库；在apk目录和系统目录进行绝对路径查找。 */
->JNI_OnLoad(JavaVM* vm, void* reserved) /* 动态链接库加载后，调用JNI_Onload() */
dalvik/vm/native/java_lang_Runtime.cpp->nativeLoad(String filename, ClassLoader loader) /* 真正执行库加载的是nativeLoad()函数,这个方法已在VM内部注册过。 */
[5]dalvik/vm/natvie/Native.cpp->dvmLoadNativeCode(const char* pathName, Object* classLoader,
        char** detail) /* 做相关线程处理；调用dlopen()打开链接库，返回句柄，获得库地址，获取库中特定函数的指针，并且调用装载库中的相应函数 */
[6]动态链接库被加载后，通过dlsym(handle, "JNI_OnLoad")调用JNI_Onload()->jniRegisterNativeMethods()本地注册方法。
[7]jniRegisterNativeMethods()->(*env)->RegisterNatives(env, clazz, gMethods, numMethods) /* 参数env所指向的一个JNIEnv结构体，通过调用这个JNIEnv结构体可以获得参数className所描述的一个类。这个类就是要注册JNI的类，而它所要注册的JNI就是由参数gMethods来描述的 */
[8]RegisterNatives()->dvmRegisterJNIMethod() /* 进行相关JNI检查 */->dvmUseJNIBridge(method, fnPtr) /* Bridage使用libffi库进行协调 */
参考：libffi库是一个开源项目，用于高级语言之间的相互调用的处理，它的源代码位于external/libffi http://www.sourceware.org/libffi/。
[9]根据不同的函数类型，选择Bridge函数：Genernal、Sync、VirtualNoRef和StaticNoRef。以dvmPlatformInvoke方式调用对应的JNI方法，通过libffi库来调用对应的JNI方法，以屏蔽Dalvik虚拟机运行在不同目标平台的细节。









